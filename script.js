'use strict';

const countriesContainer = document.querySelector('.countries');

// const getCountry = function (country) {
//   // AJAX call country
//   const request = new XMLHttpRequest();
//   request.open('GET', `https://restcountries.eu/rest/v2/name/${country}`);
//   request.send(); //–∂–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö

//   request.addEventListener('load', function () {
//     //–∫–∞–∫ –∑–∞–≥—Ä—É–∑—è—Ç—Å—è –¥–∞–Ω–Ω—ã–µ, —Å—Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ç–æ—Ç EventListener —Å 'load' –∏ –≤—ã–∑–æ–≤–µ—Ç—Å—è –∫–æ–ª–ª–±—ç–∫
//     //–ø–æ–ª—É—á–∞–µ–º JSON —Å—Ç—Ä–æ–∫—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ –æ–±—ä–µ–∫—Ç, —Å –ø–æ–º–æ—â—å—é –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–∏, —Ç.–∫. –ø–æ—Å–ª–µ JSON.parse –ø–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ —Å –æ–±—ä–µ–∫—Ç–æ–º –≤–Ω—É—Ç—Ä–∏ [{}]
//     const [data] = JSON.parse(this.responseText); // responseText - —ç—Ç–æ —Ç–æ, —á—Ç–æ –º—ã –ø–æ–ª—É—á–∞–µ–º (JSON —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω—É–∂–Ω–æ–π –Ω–∞–º —Å—Ç—Ä–∞–Ω—ã)
//     console.log(data);
//     renderCountry(data)
//
//   });
// };

const renderCountry = function (data, className) {
  const html = `
      <article class="country ${className}">
          <img class="country__img" src="${data.flag}" />
          <div class="country__data">
          <h3 class="country__name">${data.name}</h3>
          <h4 class="country__region">${data.region}</h4>
          <p class="country__row"><span>üë´</span>${(
            +data.population / 1000000
          ).toFixed(2)} mil people</p>
          <p class="country__row"><span>üó£Ô∏è</span>${data.languages[0].name}</p>
          <p class="country__row"><span>üí∞</span>${data.currencies[0].name}</p>
          </div>
      </article>
    `;
  countriesContainer.insertAdjacentHTML('beforeend', html);
  countriesContainer.style.opacity = 1;
};

// // getCountry('russia');
// // getCountry('usa');
// // getCountry('portugal');

// ////////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////////
// const renderError = function (msg) {
//   countriesContainer.insertAdjacentText('beforeend', msg);
//   //   countriesContainer.style.opacity = 1;
// };

// const getJSON = function (url, errorMsg = 'Something went wrong') {
//   return fetch(url).then(response => {
//     if (!response.ok) {
//       throw new Error(`${errorMsg} (${response.status})`); //—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å—Ä–∞–∑—É –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç —Ä–∞–±–æ—Ç—É –¥–∞–ª—å–Ω–µ–π—à—É—é, –µ–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏—Ç .catch –∏ –≤—ã–≤–µ–¥–µ—Ç –Ω–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ${err.message}
//     }

//     return response.json(); //// json() –º–µ—Ç–æ–¥ –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å (–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–∫–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ [{}] –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏) –Ω–∞ —É–¥–∞—á–Ω–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ—Ç fetch, –≤ –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ —É response. –≠—Ç–æ—Ç –º–µ—Ç–æ—Ç –í–û–ó–í–†–ê–©–ê–ï–¢ —Ç–∞–∫–∂–µ PROMISE
//   });
// };

// // const getCountryData = function (country) {
// //   //Country 1
// //   fetch(`https://restcountries.eu/rest/v2/name/${country}`)
// //     .then(response => {
// //       if (!response.ok) {
// //         throw new Error(`Country not found (${response.status})`); //—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å—Ä–∞–∑—É –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç —Ä–∞–±–æ—Ç—É –¥–∞–ª—å–Ω–µ–π—à—É—é, –µ–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏—Ç .catch –∏ –≤—ã–≤–µ–¥–µ—Ç –Ω–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ${err.message}
// //       }

// //       return response.json(); //// json() –º–µ—Ç–æ–¥ –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å (–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–∫–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ [{}] –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏) –Ω–∞ —É–¥–∞—á–Ω–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ—Ç fetch, –≤ –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ —É response. –≠—Ç–æ—Ç –º–µ—Ç–æ—Ç –í–û–ó–í–†–ê–©–ê–ï–¢ —Ç–∞–∫–∂–µ PROMISE
// //     })
// //     .then(data => {
// //       renderCountry(data[0]);

// //       const neighbour = data[0].borders[0];

// //       if (!neighbour) return;

// //       //Country 2
// //       return fetch(`https://restcountries.eu/rest/v2/alpha/${neighbour}`); //–Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–µ—á–∞ - —ç—Ç–æ –ø—Ä–æ–º–∏—Å, —á—Ç–æ–±—ã –¥–∞–ª—å—à–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–µ—Ç–æ–¥ .then
// //       // .then, .catch, .finally –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –ø—Ä–æ–º–∏—Å
// //     })
// //     .then(response => response.json())
// //     .then(data => renderCountry(data, 'neighbour'))
// //     .catch(err => {
// //       console.error(`${err}`);
// //       renderError(`Something went wrong ${err.message}. Try again!`);
// //     })
// //     .finally(() => {
// //       countriesContainer.style.opacity = 1; //–≤—Å—Ç–∞–≤–ª—è–µ–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞ —Å—é–¥–∞, —É–±—Ä–∞–≤ –∏–∑ –¥–≤—É—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ñ-—Ü–∏–π, –ø–æ—Ç–æ–º—É —á—Ç–æ .finally() –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —É–¥–∞—á–Ω–æ–π –∏–ª–∏ –ø—Ä–æ–≤–∞–ª—å–Ω–æ–π –ø–æ–¥–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å API
// //     });
// // };

// const getCountryData = function (country) {
//   //Country 1
//   getJSON(
//     `https://restcountries.eu/rest/v2/name/${country}`,
//     'Country not found'
//   )
//     .then(data => {
//       renderCountry(data[0]);

//       const neighbour = data[0].borders[0];

//       if (!neighbour) throw new Error('No neighbour found');

//       //Country 2
//       return getJSON(
//         `https://restcountries.eu/rest/v2/alpha/${neighbour}`,
//         'Country not found'
//       );
//     })
//     .then(data => renderCountry(data, 'neighbour'))
//     .catch(err => {
//       console.error(`${err}`);
//       renderError(`Something went wrong: ${err.message}. Try again!`);
//     })
//     .finally(() => {
//       countriesContainer.style.opacity = 1; //–≤—Å—Ç–∞–≤–ª—è–µ–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞ —Å—é–¥–∞, —É–±—Ä–∞–≤ –∏–∑ –¥–≤—É—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ñ-—Ü–∏–π, –ø–æ—Ç–æ–º—É —á—Ç–æ .finally() –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —É–¥–∞—á–Ω–æ–π –∏–ª–∏ –ø—Ä–æ–≤–∞–ª—å–Ω–æ–π –ø–æ–¥–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å API
//     });
// };

// getCountryData('usa');
// getCountryData('germany');

// REJECT –ü–†–ò –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ò FETCH –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞

///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
// ASYNC AWAIT

const getPosition = function () {
  return new Promise(function (resolve, reject) {
    navigator.geolocation.getCurrentPosition(resolve, reject);
  });
};

const renderError = function (msg) {
  countriesContainer.insertAdjacentText('beforeend', msg);
  countriesContainer.style.opacity = 1;
};

const whereAmI = async function () {
  try {
    //Geolocation
    const pos = await getPosition();
    const { latitude: lat, longitude: lng } = pos.coords;

    //Reverse geocoding
    const resGeo = await fetch(`https://geocode.xyz/${lat},${lng}?geoit=json`);

    if (!resGeo.ok) throw new Error('Problem getting location data'); //–µ—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –∑–∞—Ñ–µ—Ç—á–∏—Ç—Å—è —Å —Å–∞–π—Ç–∞, —Ç–æ —Å–æ–∑–¥–∞—Å—Ç—Å—è –æ—à–∏–±–∫–∞ —Å —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π. –ò –Ω–µ –Ω–∞–¥–æ –±—É–¥–µ—Ç —É–≥–∞–¥—ã–≤–∞—Ç—å –ø–æ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –æ—à–∏–±–∫–µ, –∫–æ—Ç–æ—Ä—É—é –¥–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä, —É–≥–∞–¥—ã–≤–∞—Ç—å, —á—Ç–æ –∂–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ

    const dataGeo = await resGeo.json();

    //Country data
    const response = await fetch(
      `https://restcountries.eu/rest/v2/name/${dataGeo.country}`
    ); //console.log(response); // —ç—Ç–æ —Ç–æ –∂–µ —Å–∞–º–æ–µ, —á—Ç–æ –∏ fetch(`https://restcountries.eu/rest/v2/name/${country}`).then(res => console.log(res));

    if (!response.ok) throw new Error('Problem getting country name');

    const data = await response.json();
    renderCountry(data[0]);
  } catch (err) {
    console.error(`${err}üí•`);
    renderError(`üí• ${err.message}`);
  }
};

whereAmI();

/////////////////////////////
// Another example

const getJSON = function (url, errorMsg = 'Something went wrong') {
  return fetch(url).then(response => {
    if (!response.ok) {
      throw new Error(`${errorMsg} (${response.status})`); //—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å—Ä–∞–∑—É –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç —Ä–∞–±–æ—Ç—É –¥–∞–ª—å–Ω–µ–π—à—É—é, –µ–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏—Ç .catch –∏ –≤—ã–≤–µ–¥–µ—Ç –Ω–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ${err.message}
    }

    return response.json(); //// json() –º–µ—Ç–æ–¥ –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å (–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–∫–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ [{}] –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏) –Ω–∞ —É–¥–∞—á–Ω–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ—Ç fetch, –≤ –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ —É response. –≠—Ç–æ—Ç –º–µ—Ç–æ—Ç –í–û–ó–í–†–ê–©–ê–ï–¢ —Ç–∞–∫–∂–µ PROMISE
  });
};

const get3Countries = async function (c1, c2, c3) {
  try {
    // const [data1] = await getJSON(
    //   `https://restcountries.eu/rest/v2/name/${c1}`
    // );
    // const [data2] = await getJSON(
    //   `https://restcountries.eu/rest/v2/name/${c2}`
    // );
    // const [data3] = await getJSON(
    //   `https://restcountries.eu/rest/v2/name/${c3}`
    // ); //—Ç.–∫. –Ω–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Ä—è–¥–æ–∫ –ø–æ—è–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω, –Ω–µ—Ç —Å–º—ã—Å–ª–∞ –∑–∞–ø—É—Å–∫–∞—Ç—å –∏—Ö –¥—Ä—É–≥ –∑–∞ –¥—Ä—É–≥–æ–º, —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.

    //–ø–æ—ç—Ç–æ–º—É –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Promise.all, —á—Ç–æ–±—ã –Ω–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã –∑–∞–≥—Ä—É–∂–∞–ª–∏—Å—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    const data = await Promise.all([
      //–µ—Å–ª–∏ —Ö–æ—Ç—å –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –≤–µ—Ä–Ω–µ—Ç –æ—à–∏–±–∫—É, —Ç–æ –≤—Å–µ –±—É–¥–µ—Ç –æ—à–∏–±–∫–æ–π
      getJSON(`https://restcountries.eu/rest/v2/name/${c1}`),
      getJSON(`https://restcountries.eu/rest/v2/name/${c2}`),
      getJSON(`https://restcountries.eu/rest/v2/name/${c3}`),
    ]);

    console.log(data.map(country => country[0].capital));
  } catch (err) {
    console.error(err);
  }
};

get3Countries('russia', 'germany', 'sweden');
